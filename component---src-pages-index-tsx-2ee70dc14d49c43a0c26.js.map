{"version":3,"file":"component---src-pages-index-tsx-2ee70dc14d49c43a0c26.js","mappings":"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","sources":["webpack://site/./src/components/Table.tsx","webpack://site/./src/utils/build-peculiarities.ts","webpack://site/./src/pages/index.tsx"],"sourcesContent":["import React from 'react';\nimport { tunePrice } from '../utils/tune-price';\nimport { buildPeculiarities } from '../utils/build-peculiarities';\n\ntype TablePropsT = {\n    header: string;\n    cards: Array<CardT>\n}\n\ntype CardT = {\n    Is_foil: string;\n    Frame: string;\n    Lang: string;\n    Rarity: string;\n    Price1: string;\n    Price2: string;\n    Price3: string;\n    Price4: string;\n    id: string;\n    Qtty: string;\n    Name: string;\n    Set: string;\n    Colors: string;\n    Number: string;\n}\n\nconst Table: React.FC<TablePropsT> = ({ header, cards }) => {\n    return (\n        <>\n            <h2>{header}</h2>\n            <table>\n            <thead> \n                <tr>\n                    <th>Количество</th>\n                    <th>Название</th>\n                    <th>Особенности</th>\n                    <th>Сет</th>\n                    <th>Язык</th>\n                    <th>Цена, руб</th>\n                </tr>\n            </thead>\n            <tbody>\n            {\n                cards.map(card => {\n                    const isFoil = card.Is_foil === 'true';\n                    const perticularities = buildPeculiarities(isFoil, card.Frame);\n                    const calculatedPrice = tunePrice({\n                    isFoil,\n                    isRu: card.Lang === 'ru',\n                    isRare: card.Rarity === 'rare',\n                    isMyphic: card.Rarity === 'myphic',\n                    tcgFoil: parseInt(card.Price2, 10),\n                    tcgNonFoil: parseInt(card.Price1, 10),\n                    cardMarketFoil: parseInt(card.Price4, 10),\n                    cardMarketNonFoil: parseInt(card.Price3, 10),\n                    });\n\n                    return (\n                    <tr key={card.id} >\n                        <td>{card.Qtty}</td>\n                        <td>{card.Name}</td>\n                        <td>{perticularities}</td>\n                        <td>{`${card.Set} #${card.Number}`}</td>\n                        <td>{card.Lang}</td>\n                        <td>{calculatedPrice}</td>\n                    </tr>\n                    )\n                })\n            }\n            </tbody>\n            <tfoot></tfoot>\n        </table>\n      </>\n    )\n}\n\nexport default Table;\n","import intersection from 'lodash/intersection';\n\nexport function buildPeculiarities(isFoil: boolean, frameData: string): string {\n\n    const frameModifiers = [\n        'showcase',\n        'miracle',\n        'extendedart',\n        'etched',\n        'shatteredglass'\n      ];\n\n    const framePeculiarities = frameData.split(',');\n\n    const modifiers = intersection(framePeculiarities, frameModifiers);\n\n    if (isFoil) {\n        modifiers.push('foil');\n    }\n\n    return modifiers.join(', ');\n}\n","import * as React from \"react\"\nimport type { HeadFC, PageProps } from \"gatsby\";\nimport { graphql } from \"gatsby\";\nimport '@gravity-ui/uikit/styles/fonts.css';\nimport '@gravity-ui/uikit/styles/styles.css';\n\nimport Table from '../components/Table';\n\nimport './index.css';\n\nexport const queryMulticolor = graphql`\n  query {\n    tokens: allCardsCsv(filter: {Is_token: {eq: \"true\"}}, sort: {Name: ASC}) {\n      nodes {\n        Qtty\n        Name\n        Set\n        Image\n        Price1\n        Price2\n        Price3\n        Price4\n        Collection\n        Is_foil\n        Keywords\n        Lang\n        Artist\n        EDHREC\n        Rarity\n        id\n        Frame\n        List\n        Colors\n        Type\n        Is_land\n        Number\n      }\n    }\n    lands: allCardsCsv(filter: {Colors: {eq: \"\"}, Is_land: {eq: \"true\"}}, sort: {Name: ASC}) {\n      nodes {\n        Qtty\n        Name\n        Set\n        Image\n        Price1\n        Price2\n        Price3\n        Price4\n        Collection\n        Is_foil\n        Keywords\n        Lang\n        Artist\n        EDHREC\n        Rarity\n        id\n        Frame\n        List\n        Colors\n        Type\n        Is_land\n        Number\n      }\n    }\n    colorless: allCardsCsv(filter: {Colors: {eq: \"\"}, Is_token: {eq: \"false\"}, Is_land: {eq: \"false\"}}, sort: {Name: ASC}) {\n      nodes {\n        Qtty\n        Name\n        Set\n        Image\n        Price1\n        Price2\n        Price3\n        Price4\n        Collection\n        Is_foil\n        Keywords\n        Lang\n        Artist\n        EDHREC\n        Rarity\n        id\n        Frame\n        List\n        Colors\n        Number\n      }\n    }\n    red: allCardsCsv(filter: {Colors: {eq: \"R\"}, Is_token: {eq: \"false\"},}, sort: {Name: ASC}) {\n      nodes {\n        Qtty\n        Name\n        Set\n        Image\n        Price1\n        Price2\n        Price3\n        Price4\n        Collection\n        Is_foil\n        Keywords\n        Lang\n        Artist\n        EDHREC\n        Rarity\n        id\n        Frame\n        List\n        Colors\n        Number\n      }\n    }\n    black: allCardsCsv(filter: {Colors: {eq: \"B\"}, Is_token: {eq: \"false\"},}, sort: {Name: ASC}) {\n      nodes {\n        Qtty\n        Name\n        Set\n        Image\n        Price1\n        Price2\n        Price3\n        Price4\n        Collection\n        Is_foil\n        Keywords\n        Lang\n        Artist\n        EDHREC\n        Rarity\n        id\n        Frame\n        List\n        Colors\n        Number\n      }\n    }\n    white: allCardsCsv(filter: {Colors: {eq: \"W\"}, Is_token: {eq: \"false\"},}, sort: {Name: ASC}) {\n      nodes {\n        Qtty\n        Name\n        Set\n        Image\n        Price1\n        Price2\n        Price3\n        Price4\n        Collection\n        Is_foil\n        Keywords\n        Lang\n        Artist\n        EDHREC\n        Rarity\n        id\n        Frame\n        List\n        Colors\n        Number\n      }\n    }\n    green: allCardsCsv(filter: {Colors: {eq: \"G\"}, Is_token: {eq: \"false\"},}, sort: {Name: ASC}) {\n      nodes {\n        Qtty\n        Name\n        Set\n        Image\n        Price1\n        Price2\n        Price3\n        Price4\n        Collection\n        Is_foil\n        Keywords\n        Lang\n        Artist\n        EDHREC\n        Rarity\n        id\n        Frame\n        List\n        Colors\n        Number\n      }\n    }\n    blue: allCardsCsv(filter: {Colors: {eq: \"U\"}, Is_token: {eq: \"false\"},}, sort: {Name: ASC}) {\n      nodes {\n        Qtty\n        Name\n        Set\n        Image\n        Price1\n        Price2\n        Price3\n        Price4\n        Collection\n        Is_foil\n        Keywords\n        Lang\n        Artist\n        EDHREC\n        Rarity\n        id\n        Frame\n        List\n        Colors\n        Number\n      }\n    }\n    multi: allCardsCsv(filter: {Colors: {nin: [\"R\", \"B\", \"W\", \"U\", \"G\", \"\"]}, Is_token: {eq: \"false\"},}, sort: {Name: ASC}) {\n      nodes {\n        Qtty\n        Name\n        Set\n        Image\n        Price1\n        Price2\n        Price3\n        Price4\n        Collection\n        Is_foil\n        Keywords\n        Lang\n        Artist\n        EDHREC\n        Rarity\n        id\n        Frame\n        List\n        Colors\n        Number\n      }\n    }\n  }\n`;\n\nconst IndexPage: React.FC<PageProps> = ({ data }) => {\n  const cards = data.multi.nodes;\n  const cardsColorless = data.colorless.nodes;\n  const cardsLands = data.lands.nodes;\n  const cardsRed = data.red.nodes;\n  const cardsBlack = data.black.nodes;\n  const cardsGreen = data.green.nodes;\n  const cardsWhite = data.white.nodes;\n  const cardsBlue = data.blue.nodes;\n  const cardsTokens = data.tokens.nodes;\n\n  return (\n    <>\n      <h1>Binder</h1>\n      <Table header=\"Многоцветные\" cards={cards} />\n      <Table header=\"Бесцветные\" cards={cardsColorless} />\n      <Table header=\"Земли\" cards={cardsLands} />\n      <Table header=\"Red\" cards={cardsRed} />\n      <Table header=\"Black\" cards={cardsBlack} />\n      <Table header=\"White\" cards={cardsWhite} />\n      <Table header=\"Green\" cards={cardsGreen} />\n      <Table header=\"Blue\" cards={cardsBlue} />\n      <Table header=\"Tokens\" cards={cardsTokens} />\n    </>\n  )\n}\n\nexport default IndexPage\n\nexport const Head: HeadFC = () => <title>Binder</title>\n"],"names":["_ref","header","cards","React","map","card","isFoil","Is_foil","perticularities","frameData","framePeculiarities","split","modifiers","intersection","push","join","buildPeculiarities","Frame","calculatedPrice","tunePrice","isRu","Lang","isRare","Rarity","isMyphic","tcgFoil","parseInt","Price2","tcgNonFoil","Price1","cardMarketFoil","Price4","cardMarketNonFoil","Price3","key","id","Qtty","Name","Set","Number","data","multi","nodes","cardsColorless","colorless","cardsLands","lands","cardsRed","red","cardsBlack","black","cardsGreen","green","cardsWhite","white","cardsBlue","blue","cardsTokens","tokens","Table","Head"],"sourceRoot":""}